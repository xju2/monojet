diff --git a/Root/OutputTreeMan.cxx b/Root/OutputTreeMan.cxx
index 9c04e60..07cba7d 100644
--- a/Root/OutputTreeMan.cxx
+++ b/Root/OutputTreeMan.cxx
@@ -35,6 +35,7 @@ OutputTreeMan::OutputTreeMan(bool with_sys)
         {"HLT_mu40", false},
         {"HLT_mu50", false},
         {"HLT_g140_loose", false},
+        {"HLT_j60", false},
         {"HLT_j100", false},
         {"HLT_j110", false},
         {"HLT_j150", false},
diff --git a/bsubs/submit_smear.py b/bsubs/submit_smear.py
index 4304968..073197a 100755
--- a/bsubs/submit_smear.py
+++ b/bsubs/submit_smear.py
@@ -8,7 +8,7 @@ from optparse import OptionParser
 def get_run_number(input_list):
     with open(input_list,'r') as f:
         for line in f:
-            return line.split('/')[4].split('.')[2][2:]
+            return line.split('/')[5].split('.')[2][2:]
 usage="usage: "+sys.argv[0]+" input.list outDir"
 parser = OptionParser(usage, version="0.1")
 parser.add_option("--filesPerJob", default=1, dest="files_per_job", 
diff --git a/data/dc15/Znunu.dataset b/data/dc15/Znunu.dataset
index 2955ccf..0f32c64 100644
--- a/data/dc15/Znunu.dataset
+++ b/data/dc15/Znunu.dataset
@@ -1,26 +1,18 @@
-mc15_13TeV:mc15_13TeV.361447.Sherpa_CT10_Znunu_Pt70_140_CVetoBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511267_00
-mc15_13TeV:mc15_13TeV.361447.Sherpa_CT10_Znunu_Pt70_140_CVetoBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511266_00
-mc15_13TeV:mc15_13TeV.361448.Sherpa_CT10_Znunu_Pt70_140_CFilterBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06514974_00
-mc15_13TeV:mc15_13TeV.361448.Sherpa_CT10_Znunu_Pt70_140_CFilterBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06514971_00
-mc15_13TeV:mc15_13TeV.361449.Sherpa_CT10_Znunu_Pt70_140_BFilter.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511140_00
-mc15_13TeV:mc15_13TeV.361449.Sherpa_CT10_Znunu_Pt70_140_BFilter.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511144_00
-mc15_13TeV:mc15_13TeV.361449.Sherpa_CT10_Znunu_Pt70_140_BFilter.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511142_00
-mc15_13TeV:mc15_13TeV.361450.Sherpa_CT10_Znunu_Pt140_280_CVetoBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06514730_00
-mc15_13TeV:mc15_13TeV.361450.Sherpa_CT10_Znunu_Pt140_280_CVetoBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06514731_00
-mc15_13TeV:mc15_13TeV.361451.Sherpa_CT10_Znunu_Pt140_280_CFilterBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511404_00
-mc15_13TeV:mc15_13TeV.361451.Sherpa_CT10_Znunu_Pt140_280_CFilterBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511406_00
-mc15_13TeV:mc15_13TeV.361451.Sherpa_CT10_Znunu_Pt140_280_CFilterBVeto.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06511405_00
-mc15_13TeV:mc15_13TeV.361452.Sherpa_CT10_Znunu_Pt140_280_BFilter.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06514509_00
-mc15_13TeV:mc15_13TeV.361452.Sherpa_CT10_Znunu_Pt140_280_BFilter.merge.DAOD_SUSY1.e3651_s2586_s2174_r6869_r6282_p2419_tid06514508_00
-mc15_13TeV:mc15_13TeV.361453.Sherpa_CT10_Znunu_Pt280_500_CVetoBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06511787_00
-mc15_13TeV:mc15_13TeV.361454.Sherpa_CT10_Znunu_Pt280_500_CFilterBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06513589_00
-mc15_13TeV:mc15_13TeV.361455.Sherpa_CT10_Znunu_Pt280_500_BFilter.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06512068_00
-mc15_13TeV:mc15_13TeV.361456.Sherpa_CT10_Znunu_Pt500_700_CVetoBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06514476_00
-mc15_13TeV:mc15_13TeV.361457.Sherpa_CT10_Znunu_Pt500_700_CFilterBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06511001_00
-mc15_13TeV:mc15_13TeV.361458.Sherpa_CT10_Znunu_Pt500_700_BFilter.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06514069_00
-mc15_13TeV:mc15_13TeV.361459.Sherpa_CT10_Znunu_Pt700_1000_CVetoBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06514628_00
-mc15_13TeV:mc15_13TeV.361460.Sherpa_CT10_Znunu_Pt700_1000_CFilterBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06512090_00
-mc15_13TeV:mc15_13TeV.361461.Sherpa_CT10_Znunu_Pt700_1000_BFilter.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06513145_00
-mc15_13TeV:mc15_13TeV.361462.Sherpa_CT10_Znunu_Pt1000_2000_CVetoBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06514581_00
-mc15_13TeV:mc15_13TeV.361463.Sherpa_CT10_Znunu_Pt1000_2000_CFilterBVeto.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06515166_00
-mc15_13TeV:mc15_13TeV.361464.Sherpa_CT10_Znunu_Pt1000_2000_BFilter.merge.DAOD_SUSY1.e4133_s2608_s2183_r6869_r6282_p2419_tid06514747_00
+mc15_13TeV:mc15_13TeV.361447.Sherpa_CT10_Znunu_Pt70_140_CVetoBVeto.merge.DAOD_EXOT5.e3651_s2586_s2174_r7267_r6282_p2495_tid07310786_00
+mc15_13TeV:mc15_13TeV.361448.Sherpa_CT10_Znunu_Pt70_140_CFilterBVeto.merge.DAOD_EXOT5.e3651_s2586_s2174_r7267_r6282_p2495_tid07310863_00
+mc15_13TeV:mc15_13TeV.361449.Sherpa_CT10_Znunu_Pt70_140_BFilter.merge.DAOD_EXOT5.e3651_s2586_s2174_r7267_r6282_p2495_tid07311207_00
+mc15_13TeV:mc15_13TeV.361450.Sherpa_CT10_Znunu_Pt140_280_CVetoBVeto.merge.DAOD_EXOT5.e3651_s2586_s2174_r7267_r6282_p2495_tid07311062_00
+mc15_13TeV:mc15_13TeV.361451.Sherpa_CT10_Znunu_Pt140_280_CFilterBVeto.merge.DAOD_EXOT5.e3651_s2586_s2174_r7267_r6282_p2495_tid07311057_00
+mc15_13TeV:mc15_13TeV.361452.Sherpa_CT10_Znunu_Pt140_280_BFilter.merge.DAOD_EXOT5.e3651_s2586_s2174_r7267_r6282_p2495_tid07311408_00
+mc15_13TeV:mc15_13TeV.361453.Sherpa_CT10_Znunu_Pt280_500_CVetoBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311391_00
+mc15_13TeV:mc15_13TeV.361454.Sherpa_CT10_Znunu_Pt280_500_CFilterBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311075_00
+mc15_13TeV:mc15_13TeV.361455.Sherpa_CT10_Znunu_Pt280_500_BFilter.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07310774_00
+mc15_13TeV:mc15_13TeV.361456.Sherpa_CT10_Znunu_Pt500_700_CVetoBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07310868_00
+mc15_13TeV:mc15_13TeV.361457.Sherpa_CT10_Znunu_Pt500_700_CFilterBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311153_00
+mc15_13TeV:mc15_13TeV.361458.Sherpa_CT10_Znunu_Pt500_700_BFilter.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311106_00
+mc15_13TeV:mc15_13TeV.361459.Sherpa_CT10_Znunu_Pt700_1000_CVetoBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07310746_00
+mc15_13TeV:mc15_13TeV.361460.Sherpa_CT10_Znunu_Pt700_1000_CFilterBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311174_00
+mc15_13TeV:mc15_13TeV.361461.Sherpa_CT10_Znunu_Pt700_1000_BFilter.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311162_00
+mc15_13TeV:mc15_13TeV.361462.Sherpa_CT10_Znunu_Pt1000_2000_CVetoBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311406_00
+mc15_13TeV:mc15_13TeV.361463.Sherpa_CT10_Znunu_Pt1000_2000_CFilterBVeto.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07310638_00
+mc15_13TeV:mc15_13TeV.361464.Sherpa_CT10_Znunu_Pt1000_2000_BFilter.merge.DAOD_EXOT5.e4133_s2608_s2183_r7326_r6282_p2495_tid07311134_00
\ No newline at end of file
diff --git a/log b/log
index 8c8866c..fe2add2 100644
--- a/log
+++ b/log
@@ -1,379 +0,0 @@
-diff --git a/Root/LinkDef.h b/Root/LinkDef.h
-index fc5db2c..f62dd61 100644
---- a/Root/LinkDef.h
-+++ b/Root/LinkDef.h
-@@ -1,5 +1,5 @@
--#ifndef WiscAnalysis_LINKDEF_H
--#define WiscAnalysis_LINKDEF_H
-+#ifndef MONOJET_LINKDEF_H
-+#define MONOJET_LINKDEF_H
- 
- #include <MonoJet/MyCuts.h>
- #include <MonoJet/OutputTreeMan.h>
-diff --git a/Root/OutputTreeMan.cxx b/Root/OutputTreeMan.cxx
-index a2eaef3..9c04e60 100644
---- a/Root/OutputTreeMan.cxx
-+++ b/Root/OutputTreeMan.cxx
-@@ -214,6 +214,8 @@ void OutputTreeMan::AddBranches2Tree(TTree& MyTree)
-     MyTree.Branch("MET_et", &MET_et, "MET_et/D");
-     MyTree.Branch("MET_ecorr", &MET_et_noEE, "MET_ecorr/D");
-     MyTree.Branch("MET_sumet", &MET_sumet_, "MET_sumet/D");
-+    MyTree.Branch("MET_sumet_noMuon", &MET_sumet_noMuon_, "MET_sumet_noMuon/D");
-+    MyTree.Branch("MET_et_soft", &MET_et_soft_, "MET_et_soft/D");
- 
-     MyTree.Branch("MET_mu_etx", &MET_mu_etx_,     "MET_mu_etx/D");
-     MyTree.Branch("MET_mu_ety", &MET_mu_ety_,     "MET_mu_ety/D");
-diff --git a/cmt/Makefile.RootCore b/cmt/Makefile.RootCore
-index 4a1d8f6..c675138 100644
---- a/cmt/Makefile.RootCore
-+++ b/cmt/Makefile.RootCore
-@@ -10,7 +10,7 @@
- PACKAGE          = MonoJet
- 
- # the libraries to link with this one:
--PACKAGE_PRELOAD  = Tree RooFit
-+PACKAGE_PRELOAD  = Tree RooFit AthContainers
- 
- # additional compilation flags to pass (not propagated to dependent packages):
- PACKAGE_CXXFLAGS =
-@@ -28,7 +28,7 @@ PACKAGE_BINFLAGS =
- PACKAGE_LIBFLAGS = 
- 
- # the list of packages we depend on:
--PACKAGE_DEP      = PATCore CalibrationDataInterface GoodRunsLists PileupReweighting ReweightUtils TauCorrUncert xAODBase xAODEventInfo xAODEgamma xAODMuon xAODJet xAODTau xAODMissingET xAODTracking AsgTools PATInterfaces JetCalibTools JetResolution JetSelectorTools JetUncertainties ElectronPhotonFourMomentumCorrection ElectronEfficiencyCorrection MuonMomentumCorrections MuonEfficiencyCorrections MuonSelectorTools xAODBTaggingEfficiency TauAnalysisTools METUtilities METInterface SUSYTools AsgTools  CPAnalysisExamples JetMomentTools JetRec JetEDM MyXAODTools JetSmearing
-+PACKAGE_DEP      = PATCore CalibrationDataInterface GoodRunsLists PileupReweighting ReweightUtils TauCorrUncert xAODBase xAODEventInfo xAODEgamma xAODMuon xAODJet xAODTau xAODMissingET xAODTracking AsgTools PATInterfaces JetCalibTools JetResolution JetSelectorTools JetUncertainties ElectronPhotonFourMomentumCorrection ElectronEfficiencyCorrection MuonMomentumCorrections MuonEfficiencyCorrections MuonSelectorTools xAODBTaggingEfficiency TauAnalysisTools METUtilities METInterface SUSYTools AsgTools  CPAnalysisExamples JetMomentTools JetRec JetEDM MyXAODTools JetSmearing AthContainers 
- # BCHCleaningTool TileTripReader
- # the list of packages we use if present, but that we can work without :
- PACKAGE_TRYDEP   = 
-diff --git a/scripts/AtlasStyle.pyc b/scripts/AtlasStyle.pyc
-index e50b39a..f933c82 100644
-Binary files a/scripts/AtlasStyle.pyc and b/scripts/AtlasStyle.pyc differ
-diff --git a/scripts/jetsmearing.py b/scripts/jetsmearing.py
-old mode 100644
-new mode 100755
-index 5064888..c0ecd92
---- a/scripts/jetsmearing.py
-+++ b/scripts/jetsmearing.py
-@@ -9,7 +9,10 @@ ROOT.gROOT.SetBatch()
- if not hasattr(ROOT, "loader"):
-     ROOT.gROOT.LoadMacro("/afs/cern.ch/user/x/xju/tool/loader.c") 
- 
--ROOT.gSystem.Load(os.getenv("MonoJetCodeDir")+"RootCoreBin/lib/x86_64-slc6-gcc48-opt/libWiscAnalysis.so")
-+ROOT.gROOT.LoadMacro(os.getenv("ROOTCOREBIN")+"/lib/x86_64-slc6-gcc48-opt/libCxxUtils.so")
-+ROOT.gROOT.LoadMacro(os.getenv("ROOTCOREBIN")+"/lib/x86_64-slc6-gcc48-opt/libAthContainers.so")
-+ROOT.gROOT.LoadMacro(os.getenv("ROOTCOREBIN")+"/lib/x86_64-slc6-gcc48-opt/libMonoJet.so")
-+
- triggers = ["HLT_j100",  "HLT_j110",  "HLT_j150",  "HLT_j175",  "HLT_j200",
-             "HLT_j260",  "HLT_j300",  "HLT_j320",  "HLT_j360"]
- # unit: ipb
-@@ -17,59 +20,62 @@ lumi_list = [979.768*1E-3, 1441.75*1E-3,  5357.85*1E-3, 10698.3*1E-3,
-               19701.4*1E-3, 68386.7*1E-3, 135.87, 191.304, 3316.68] 
- unprescaled_lumi = 3316.68
- 
--class jetsmearing:
--    def __init__(self):
--        print "Using Jet Smearing"
--        self.seed_met_sig_list = []
--        self.seed_met_list = []
--        self.seed_jetpt_list = []
--        self.seed_njets_list = []
--        self.seed_dphi_list = []
--
--        self.met_sig_list = []
--        self.met_list = []
--        self.jetpt_list = []
--        self.njets_list = []
--        self.dphi_list = []
-+class HistMgr:
-+    def __init__(self, tag_name):
-+        self.tag = tag_name
-+        all_list = []
-+        all_list.append(self.create_hist_tuple("met", 50, 0, 500))
-+        all_list.append(self.create_hist_tuple("jetpt", 100, 0, 1000))
-+        all_list.append(self.create_hist_tuple("njets", 11, -0.5, 10.5))
-+        all_list.append(self.create_hist_tuple("met_sig", 100, 0, 10))
-+        all_list.append(self.create_hist_tuple("dphi", 64, 0, 3.2))
-+        all_list.append(self.create_hist_tuple("dphiEP", 64, 0, 3.2))
-+        self.list_dic = dict(all_list)
-+
-+    def create_hist_tuple(self, name, nbins, low, high):
-+        res_list = []
-         for trig in triggers:
--            self.seed_met_list.append(
--                ROOT.TH1F("h_seed_met_"+trig, "E_{T}^{miss} GeV;Seed MET",50, 0, 500)
--            )
--            self.seed_met_sig_list.append(
--                ROOT.TH1F("h_seed_met_sig_"+trig, "S;MET significance", 100, 0, 10)
--            )
--            self.seed_jetpt_list.append(
--                ROOT.TH1F("h_seed_jetpt_"+trig,"", 100, 0, 1000)
--            )
--            self.seed_njets_list.append(
--                ROOT.TH1F("h_seed_njets_"+trig, " ", 10, 0, 10)
--            )
--            self.seed_dphi_list.append(
--                ROOT.TH1F("h_seed_dphi_"+trig, " ", 64, 0, 3.2)
-+            hist_name = "h_"+self.tag+"_"+name+"_"+trig
-+            res_list.append(
-+                ROOT.TH1F(hist_name, hist_name, nbins, low, high)
-             )
-+        return (name, res_list)
-+
-+    def fill(self, itrig, weight, met, jet_pt, njets, met_sig, dphi, dphiEP):
-+        self.met_list[itrig].Fill(met, weight)
-+        self.jetpt_list[itrig].Fill(jet_pt, weight)
-+        self.njets_list[itrig].Fill(njets, weight)
-+        self.met_sig_list[itrig].Fill(met_sig, weight)
-+        self.dphi_list[itrig].Fill(dphi, weight)
-+        self.dphi_EP_list[itrig].Fill(dphiEP, weight)
-+    
-+    def merged_hists(self):
-+        hist_list = []
-+        hist_list.append(self.add_hist(self.met_list, self.tag+"_met"))
-+        hist_list.append(self.add_hist(self.jetpt_list, self.tag+"_jetpt"))
-+        hist_list.append(self.add_hist(self.njets_list, self.tag+"_njets"))
-+        hist_list.append(self.add_hist(self.met_sig_list, self.tag+"_met_sig"))
-+        hist_list.append(self.add_hist(self.dphi_list, self.tag+"_dphi"))
-+        hist_list.append(self.add_hist(self.dphi_EP_list, self.tag+"_dphiEP"))
-+        return hist_list
- 
--            self.met_list.append(
--                ROOT.TH1F("h_met_"+trig, "E_{T}^{miss} GeV;Seed MET",50, 0, 500)
--            )
--            self.met_sig_list.append(
--                ROOT.TH1F("h_met_sig_"+trig, "S;MET significance", 100, 0, 10)
--            )
--            self.jetpt_list.append(
--                ROOT.TH1F("h_jetpt_"+trig,"", 100, 0, 1000)
--            )
--            self.njets_list.append(
--                ROOT.TH1F("h_njets_"+trig, " ", 10, 0, 10)
--            )
--            self.dphi_list.append(
--                ROOT.TH1F("h_dphi_"+trig, " ", 64, 0, 3.2)
--            )
-+    @staticmethod
-+    def add_hist(hist_list, hist_name):
-+        icount = 0
-+        for hist in hist_list:
-+            if icount == 0:
-+                all_hist = hist.Clone(hist_name)
-+            else:
-+                all_hist.Add(hist)
-+            icount += 1
-+        return all_hist
- 
--        self.smeared_met = ROOT.TH1F("smeared_met", "Smeared MET", 200, 0, 2000)
--        self.smeared_jetpt = ROOT.TH1F("smeared_jetpt", "Smeared leading jet pt", 200, 0, 2000)
--        self.smeared_dphi = ROOT.TH1F("smeared_dphi", "Smeared dphi ", 64, 0, 3.2)
--        self.smeared_njets = ROOT.TH1F("smeared_njets", "Smeared njets", 10, 0, 10)
--        self.smeared_dphiEP = ROOT.TH1F("smeared_dphiEP", "Smeared dphi(MET,MPT)", 
--                                        64, 0, 32)
-+class jetsmearing:
-+    def __init__(self):
-+        print "Using Jet Smearing"
-+        self.seed_hists = HistMgr("seed")
-+        self.all_hists = HistMgr("all")
-+        self.smeared_hists = HistMgr("smeared")
- 
-     def pass_trigger(self):
-         chain = self.chain
-@@ -89,18 +95,6 @@ class jetsmearing:
-                 out = not res and out
-         return out
- 
--    @staticmethod
--    def add_hist(hist_list, hist_name):
--        icount = 0
--        for hist in hist_list:
--            if icount == 0:
--                all_hist = hist.Clone(hist_name)
--            else:
--                all_hist.Add(hist)
--            icount += 1
--        return all_hist
--
--
-     def is_seed_events(self):
-         ch = self.chain
-         met_sig = ch.MET_et/1e3/math.sqrt(ch.MET_sumet/1e3)
-@@ -118,72 +112,78 @@ class jetsmearing:
-             ch.LoadTree(ientry)
- 
-             #if ientry % 10000 == 0: print ientry
--            #self.fill_pseudo_data()
-             icount = 0
-             for trig,lumi in zip(triggers, lumi_list):
-                 weight = unprescaled_lumi/lumi
-                 if self.pass_trig_only(trig):
-                     jet_pt = ch.jet_p4[0].Pt()/1E3;
-                     if jet_pt < 150: continue
-+                    dphi_EP = abs(ROOT.TVector2.Phi_mpi_pi(ch.MET_phi-ch.MET_trk_phi))
-                     met_sig = ch.MET_et/1e3/math.sqrt(ch.MET_sumet/1e3)
--                    self.met_list[icount].Fill(ch.MET_et/1e3, weight)
--                    self.jetpt_list[icount].Fill(jet_pt, weight)
--                    self.njets_list[icount].Fill(ch.n_good_jet, weight)
--                    self.met_sig_list[icount].Fill(met_sig, weight)
--                    self.dphi_list[icount].Fill(ch.min_dphi_jetMET, weight)
-+
-+                    self.all_hists.fill(icount, weight,
-+                                       ch.MET_et/1e3, jet_pt, ch.n_good_jet,
-+                                       met_sig,ch.min_dphi_jetMET, dphi_EP)
-                     if self.is_seed_events():
--                        self.seed_met_list[icount].Fill(ch.MET_et/1e3, weight)
--                        self.seed_jetpt_list[icount].Fill(jet_pt, weight)
--                        self.seed_njets_list[icount].Fill(ch.n_good_jet, weight)
--                        self.seed_met_sig_list[icount].Fill(met_sig, weight)
--                        self.seed_dphi_list[icount].Fill(ch.min_dphi_jetMET, weight)
-+                        self.seed_hists.fill(icount, weight,
-+                                       ch.MET_et/1e3, jet_pt, ch.n_good_jet,
-+                                       met_sig,ch.min_dphi_jetMET, dphi_EP)
-+                        self.fill_pseudo_data(icount, weight, met_sig)
-+
-         fout = ROOT.TFile.Open(out_name, "recreate")
--        self.add_hist(self.seed_met_list, "seed_met").Write()
--        self.add_hist(self.seed_jetpt_list, "seed_jetpt").Write()
--        self.add_hist(self.seed_njets_list, "seed_njets").Write()
--        self.add_hist(self.seed_met_sig_list, "seed_met_sig").Write()
--        self.add_hist(self.seed_dphi_list, "seed_dphi").Write()
--        self.add_hist(self.met_list, "met").Write()
--        self.add_hist(self.jetpt_list, "jetpt").Write()
--        self.add_hist(self.njets_list, "njets").Write()
--        self.add_hist(self.met_sig_list, "met_sig").Write()
--        self.add_hist(self.dphi_list, "dphi").Write()
--        self.smeared_met.Write()
--        self.smeared_jetpt.Write()
--        self.smeared_dphi.Write()
--        self.smeared_njets.Write()
--        self.smeared_dphiEP.Write()
-+        for hist in self.all_hists.merged_hists():
-+            hist.Write()
-+        for hist in self.seed_hists.merged_hists():
-+            hist.Write()
-+        for hist in self.smeared_hists.merged_hists():
-+            hist.Write()
-         fout.Close()
- 
--    def fill_pseudo_data(self):
-+    def fill_pseudo_data(self, icount, weight, met_sig):
-         for data in self.chain.pseudoData:
--            self.smeared_met.Fill(data.met_/1e3)
--            self.smeared_jetpt.Fill(data.leading_jet_pt_/1e3)
--            self.smeared_dphi.Fill(data.min_jets_met_)
--            self.smeared_njets.Fill(data.n_good_jets_)
--            self.smeared_dphiEP.Fill(data.dphi_EP_)
--
--    def save_hist(self, out_name):
--        file_out = ROOT.TFile.Open(out_name, "RECREATE")
--        for key, value in self.__dict__.items():
--            if value.InheritsFrom("TH1"): value.Write()
--        file_out.Close()
-+            self.smeared_hists.fill(icount, weight, 
-+                                    data.met_/1e3, data.leading_jet_pt_/1e3,
-+                                    data.n_good_jets_, met_sig, 
-+                                    data.min_jets_met_,data.dphi_EP_)
- 
-     def process(self, file_name):
-         out_name = "smeared_hist.root"
-         self.read_file(file_name, out_name)
--   
--def save_plot(file_name):
--    file_in = ROOT.TFile.Open(file_name, "read")
--    canvas = ROOT.TCanvas("canvas", "canvas", 600, 600)
--    for key in file_in.GetListOfKeys():
--        h1 = file_in.Get(key.GetName())
--        if not h1.InheritsFrom("TH1"): continue
--        h1.Draw()
--        canvas.SaveAs("eps/"+key.GetName()+".eps")
-+  
-+    @staticmethod
-+    def save_plot(file_name):
-+        file_in = ROOT.TFile.Open(file_name, "read")
-+        canvas = ROOT.TCanvas("canvas", "canvas", 600, 600)
-+        for key in file_in.GetListOfKeys():
-+            h1 = file_in.Get(key.GetName())
-+            if not h1.InheritsFrom("TH1"): continue
-+            h1.Draw()
-+            canvas.SaveAs("eps/"+key.GetName()+".eps")
-+
-+    @staticmethod
-+    def compare_all_smeared(file_name):
-+        file_in = ROOT.TFile.Open(file_name, "read")
-+        hist_base_names = ["met", "jetpt", "njets", "met_sig", "dphi", "dphiEP"]
-+        shape_only = True
-+        for hist_name in hist_base_names:
-+            h1_name = "all_"+hist_name
-+            h2_name = "smeared_"+hist_name
-+            h3_name = "seed_"+hist_name
-+            h1 = file_in.Get(h1_name)
-+            h2 = file_in.Get(h2_name)
-+            h3 = file_in.Get(h3_name)
-+            h1.SetMarkerSize(0.05)
-+            h2.SetMarkerSize(0.05)
-+            h3.SetMarkerSize(0.05)
-+            hist_tlist = ROOT.TList()
-+            hist_tlist.Add(h2) 
-+            hist_tlist.Add(h3) 
-+            hist_tlist.Add(h1)
-+            ROOT.compare_hists(hist_tlist, hist_name, shape_only, True, True)
- 
- if __name__ == "__main__":
-     file_name = ""
-     jetsmear = jetsmearing()
--    jetsmear.process('data.list')
-+    jetsmear.compare_all_smeared("smeared_hist.root")
-+    #jetsmear.process('data_smeared.list')
-     #jetsmear.process('reduced_ntup.root')
-diff --git a/util/Group_8TeV_SUSYTools.cxx b/util/Group_8TeV_SUSYTools.cxx
-index 6327fd9..9dcc12c 100644
---- a/util/Group_8TeV_SUSYTools.cxx
-+++ b/util/Group_8TeV_SUSYTools.cxx
-@@ -201,12 +201,13 @@ int main( int argc, char* argv[] )
-     vector<string> prw_conf;
-     prw_conf.push_back(maindir+"/data/MyXAODTools/merged_prw_25ns_monojet_bkg_mc.root");
-     prw_conf.push_back(maindir+"/data/MyXAODTools/merged_prw_monojet_signals.root");
-+    CHECK( objTool.setProperty("DataSource", data_source) );
-     CHECK( objTool.setProperty("PRWConfigFiles", prw_conf) );
- 
-     vector<string> prw_lumicalc;
-     prw_lumicalc.push_back(maindir+"/data/MyXAODTools/ilumicalc_histograms_None_276262-284484.root");
-     CHECK( objTool.setProperty("PRWLumiCalcFiles", prw_lumicalc) );
--    CHECK( objTool.setProperty("ConfigFile", Form("%s/data/MonoJet/monojet.conf", maindir.c_str())) );
-+    CHECK( objTool.setProperty("ConfigFile", maindir+"/data/MonoJet/monojet.conf") );
- 
-     if( objTool.initialize() != StatusCode::SUCCESS){
-         Error( APP_NAME, "Cannot intialize SUSYObjDef_xAOD..." );
-@@ -444,7 +445,7 @@ int main( int argc, char* argv[] )
-                         ) );
-             xAOD::MissingETContainer::const_iterator met_it = met->find("Final");
- 
--            if (met_it == met->end() )//  || met_it_muon == met->end() )
-+            if (met_it == met->end() )
-             {
-                 Error( APP_NAME, "No RefFinal inside MET container" );
-             }
-@@ -453,6 +454,9 @@ int main( int argc, char* argv[] )
-             output.MET_phi = (*met_it)->phi();
-             output.MET_et  = (*met_it)->met();
-             output.MET_sumet_ = (*met_it)->sumet();
-+            xAOD::MissingETContainer::const_iterator met_muon_it = met->find("Muons");
-+            output.MET_sumet_noMuon_ = output.MET_sumet_ - (*met_muon_it)->sumet();
-+            output.MET_et_soft_ = (*(met->find("PVSoftTrk")))->met();
- 
-             /* ********
-              * normal MET 
-@@ -735,11 +739,11 @@ void get_smeared_info(ST::SUSYObjDef_xAOD& objTool, xAOD::JetContainer* jets,
-     smeared_info.met_ =(float) (*met_it)->met();
-     float min_dphi_jetMET  = 9999;
-     int n_good_jets = 0;
--    for(auto jet: *jets){
-+    for(auto jet: *jets) {
-         float dphi = (float) fabs(TVector2::Phi_mpi_pi((*met_it)->phi() - jet->phi()));
-         if(dphi < min_dphi_jetMET) min_dphi_jetMET = dphi;
--        bool is_signal = objTool.IsSignalJet((*jet), 30e3, 2.8, 0.64);
--        if(is_signal) n_good_jets ++;
-+        // bool is_signal = objTool.IsSignalJet((*jet), 30e3, 2.8, 0.64);
-+        if(jet->pt() > 30E3 && fabs(jet->eta()) < 2.8) n_good_jets ++;
-     }
-     smeared_info.min_jets_met_ = min_dphi_jetMET;
-     smeared_info.n_good_jets_ = n_good_jets;
diff --git a/scripts/AtlasStyle.py b/scripts/AtlasStyle.py
index 8916cef..0e8aabe 100644
--- a/scripts/AtlasStyle.py
+++ b/scripts/AtlasStyle.py
@@ -1,114 +1,6 @@
-# $Id: AtlasStyle.py 153446 2015-02-22 16:28:34Z xju $
-#
-# Module implementing a TStyle that follows the ATLAS recommendations.
-#
-
-# PyROOT is needed:
 import ROOT
-
-##
-# @short An ATLAS-specific style
-#
-# This is yet another implementation for the common ATLAS style. The user
-# basically just needs to import this module, and from there on the plots
-# produced will follow the atlas plot style.
-#
-class AtlasStyle( ROOT.TStyle ):
-
-    ##
-    # @short Object constructor
-    #
-    # The constructor just initializes the underlying TStyle object, and
-    # calls the configure() function to set up the ATLAS style.
-    #
-    # The parameters of the constructor should just be ignored in 99.9%
-    # of the cases.
-    #
-    # @param name The name given to the style
-    # @param title The title given to the style
-    def __init__( self, name = "AtlasStyle", title = "ATLAS style object" ):
-
-        # Initialise the base class:
-        ROOT.TStyle.__init__( self, name, title )
-        self.SetName( name )
-        self.SetTitle( title )
-
-        # Call the configure function for setting up the style:
-        self.configure()
-
-        return
-
-    ##
-    # @short Configure the object for the ATLAS style
-    #
-    # This function actually takes care of setting up the ATLAS style.
-    # I implemented it based on a C++ TStyle object, which in turn was
-    # implemented based on a central piece of CINT macro.
-    def configure( self ):
-
-        # Tell the user what we're doing:
-        self.Info( "configure", "Configuring default ATLAS style" )
-
-        # Use plain black on white colors:
-        icol = 0
-        self.SetFrameBorderMode( 0 )
-        self.SetFrameFillColor( icol )
-        self.SetFrameFillStyle( 0 )
-        self.SetCanvasBorderMode( 0 )
-        self.SetPadBorderMode( 0 )
-        self.SetPadColor( icol )
-        self.SetCanvasColor( icol )
-        self.SetStatColor( icol )
-
-        # Set the paper and margin sizes:
-        self.SetPaperSize( 20, 26 )
-        self.SetPadTopMargin( 0.05 )
-        self.SetPadRightMargin( 0.05 )
-        self.SetPadBottomMargin( 0.16 )
-        self.SetPadLeftMargin( 0.16 )
-
-        # set title offsets (for axis label)
-        self.SetTitleXOffset(1.4);
-        self.SetTitleYOffset(1.4);
-
-        # Use large fonts:
-        font_type = 42
-        font_size = 0.05
-        self.SetTextFont( font_type )
-        self.SetTextSize( font_size )
-        self.SetLabelFont( font_type, "x" )
-        self.SetLabelSize( font_size, "x" )
-        self.SetTitleFont( font_type, "x" )
-        self.SetTitleSize( font_size, "x" )
-        self.SetLabelFont( font_type, "y" )
-        self.SetLabelSize( font_size, "y" )
-        self.SetTitleFont( font_type, "y" )
-        self.SetTitleSize( font_size, "y" )
-        self.SetLabelFont( font_type, "z" )
-        self.SetLabelSize( font_size, "z" )
-        self.SetTitleFont( font_type, "z" )
-        self.SetTitleSize( font_size, "z" )
-
-        # Use bold lines and markers:
-        self.SetMarkerStyle( 20 )
-        self.SetMarkerSize( 1.2 )
-        self.SetHistLineWidth( 2 )
-        self.SetLineStyleString( 2, "[12 12]" )
-
-        # Do not display any of the standard histogram decorations:
-        self.SetOptTitle( 0 )
-        self.SetOptStat( 0 )
-        self.SetOptFit( 0 )
-
-        # Put tick marks on top and rhs of the plots:
-        self.SetPadTickX( 1 )
-        self.SetPadTickY( 1 )
-
-        return
-
-# Tell ROOT to use this style:
-style = AtlasStyle()
-ROOT.gROOT.SetStyle( style.GetName() )
-#ROOT.gROOT.ForceStyle()
-ROOT.TGaxis.SetMaxDigits( 4 )
-ROOT.gStyle.SetPalette(1)
+import os
+file_dir = os.getenv("MonoJetCodeDir")+"MonoJet/scripts/AtlasStyle.C"
+if not hasattr(ROOT, "SetAtlasStyle"):
+    ROOT.gROOT.LoadMacro(file_dir)
+ROOT.SetAtlasStyle()
diff --git a/scripts/AtlasStyle.pyc b/scripts/AtlasStyle.pyc
index f933c82..4471adc 100644
Binary files a/scripts/AtlasStyle.pyc and b/scripts/AtlasStyle.pyc differ
diff --git a/scripts/PyROOTUtils.py b/scripts/PyROOTUtils.py
index d60ea28..8c4ad6c 100644
--- a/scripts/PyROOTUtils.py
+++ b/scripts/PyROOTUtils.py
@@ -1,386 +1,16 @@
 #!/usr/bin/env python
 
-__author__ = "Sven Kreiss, Kyle Cranmer"
+__author__ = "Xiangyang Ju"
 __version__ = "0.1"
 __doc__ = """
-Module providing some convenience classes for ROOT. This helps making fixed font size
-legends, graphs from Python lists, Bands from lists including outlines of Bands. One
-of the highlights is also putting text on graphs including multi-line support; and
-it is just a single function call.
-
-Alignment is clearer: halign="right", valign="bottom" is translated automatically into
-the number codes that represent the alignment.
 """
 
-
-
 import ROOT
 from array import array
 
-
-
-
-class Legend( ROOT.TLegend ):
-   def __init__( self, x1, y1, x2 = 1.1, y2 = 1.1, halign = "fixed", valign = "fixed", font=42, textSize = None ):
-      """
-Either use like (x1,y1,x2,y2) or (x1,y1,halign="left",valign="top").
-If just (x1,y1) is used, halign="left" and valign="top" is assumed.
-Change the font with font=62 (default is 42).
-"""
-      if x2 == 1.1 and halign == "fixed": halign = "left"
-      if y2 == 1.1 and valign == "fixed": valign = "top"
-      self.halign = halign
-      self.valign = valign
-      ROOT.TLegend.__init__( self, x1, y1, x2, y2 )
-      self.SetTextFont( font )
-      if textSize: self.SetTextSize( textSize )
-
-   def Draw( self ):
-      # the coordinates in x1,y1 are always the corner the legend sticks to
-      
-      # need to set a fixed font size for the functions below to work
-      if self.halign != "fixed" or self.valign != "fixed":
-         if self.GetTextSize() < 0.0001:
-            self.SetTextSize( 0.04 )
-      
-      # valign
-      height = 1.3*self.GetTextSize()*self.GetNRows()
-      if self.valign == "top":
-         self.SetY2( self.GetY1() )
-         self.SetY1( self.GetY2() - height )
-      if self.valign == "bottom":
-         self.SetY2( self.GetY1() + height )
-      if self.valign == "center":
-         center = self.GetY1()
-         self.SetY2( center + height/2 )
-         self.SetY1( center - height/2 )
-
-      # halign
-      width = 0.15 + self.GetTextSize()*self.GetNColumns()
-      if self.halign == "left":
-         self.SetX2( self.GetX1() + width )
-      if self.halign == "right":
-         self.SetX2( self.GetX1() )
-         self.SetX1( self.GetX2() - width )
-         print( "=--------------> "+str(width) )
-      if self.halign == "center":
-         center = self.GetX1()
-         self.SetX1( center - width/2 )
-         self.SetX2( center + width/2 )
-
-      self.SetFillStyle( 0 )
-      self.SetBorderSize( 0 )
-      ROOT.TLegend.Draw( self )
-
-
-class Graph( ROOT.TGraph ):
-   def __init__( self, x, y=None, fillColor=None, lineColor=None, lineStyle=None, lineWidth=None, sort=True ):
-      """ takes inputs of the form:
-x = [ (x1,y1), (x2,y2), ... ]
-y = None (default)
-or
-x = [x1,x2,...]
-y = [y1,y2,...]
-"""
-
-      if x == None:
-         print( "WARNING: Tried to make graph of NULL object. Abort." )
-         return
-
-      if isinstance( x,ROOT.TObject ):
-         ROOT.TGraph.__init__( self, x )
-      
-      else:
-         if not y:
-            # assume x is of the form: [ (x1,y1), (x2,y2), ... ]
-            # --> split into xy
-            y = [i[1] for i in x]
-            x = [i[0] for i in x]
-      
-         if len(x) != len(y):
-            print( "x and y have to have the same length." )
-            return
-            
-         # sort
-         if sort:
-            xy = sorted( zip(x,y) )
-            x = [i for i,j in xy]
-            y = [j for i,j in xy]
-   
-         ROOT.TGraph.__init__( self, len(x), array('f',x), array('f',y) )
-      
-      
-      if fillColor:
-         self.SetFillColor( fillColor )
-      if lineColor:
-         self.SetLineColor( lineColor )
-      if lineStyle:
-         self.SetLineStyle( lineStyle )
-      if lineWidth:
-         self.SetLineWidth( lineWidth )
-         
-   def GetRanges( self ):
-      r = ( ROOT.Double(), ROOT.Double(), ROOT.Double(), ROOT.Double() )
-      self.ComputeRange( r[0], r[1], r[2], r[3] )
-      return r
-
-   def scale( self, factor ):
-      for i in range( 0, self.GetN() ):
-         p = ( ROOT.Double(), ROOT.Double() )
-         self.GetPoint( i, p[0], p[1] )
-         self.SetPoint( i, p[0], p[1]*factor )
-
-   def add( self, term ):
-      for i in range( 0, self.GetN() ):
-         p = ( ROOT.Double(), ROOT.Double() )
-         self.GetPoint( i, p[0], p[1] )
-         self.SetPoint( i, p[0], p[1]+term )
-   
-   def integral( self ):
-      """ Calculate integral using trapezoidal rule. """
-      integral = 0.0
-      for i in range( 1, self.GetN() ):
-         previousPoint = ( ROOT.Double(), ROOT.Double() )
-         thisPoint = ( ROOT.Double(), ROOT.Double() )
-         self.GetPoint( i-1, previousPoint[0], previousPoint[1] )
-         self.GetPoint( i, thisPoint[0], thisPoint[1] )
-         
-         integral += (thisPoint[0]-previousPoint[0]) * (thisPoint[1]+previousPoint[1])/2.0
-      return integral
-      
-   def argminX( self ):
-      """ Get the minimum X. """
-      min = 1e30
-      minX = None
-      for i in range( 0, self.GetN() ):
-         p = ( ROOT.Double(), ROOT.Double() )
-         self.GetPoint( i, p[0], p[1] )
-         if p[1] < min:
-            min = p[1]
-            minX = p[0]
-      return minX
-      
-   def argminY( self ):
-      """ Get the minimum Y. """
-      min = 1e30
-      for i in range( 0, self.GetN() ):
-         p = ( ROOT.Double(), ROOT.Double() )
-         self.GetPoint( i, p[0], p[1] )
-         if p[1] < min: min = p[1]
-      return min
-      
-
-   def table( self, bandLow=None, bandHigh=None, bandDifference=True ):
-      out = ""
-      
-      for i in range( self.GetN() ):
-         out += "%f \t%f" % ( self.GetX()[i], self.GetY()[i] )
-         if bandLow:
-            bL = bandLow.Eval( self.GetX()[i] )
-            if bandDifference: bL -= self.GetY()[i]
-            out += " \t"+str( bL )
-         if bandHigh:
-            bH = bandHigh.Eval( self.GetX()[i] )
-            if bandDifference: bH -= self.GetY()[i]
-            out += " \t"+str( bH )
-         
-         out += "\n"
-         
-      return out
-         
-   def getFirstIntersectionsWithGraph( self, otherGraph, xVar=None, xCenter=None, xRange=None, steps=1000 ):
-      """ xRange must be of the form (min,max) when given """
-      if xVar and not xRange: xRange = (xVar.getMin(), xVar.getMax())
-      if xVar and not xCenter: xCenter = xVar.getVal()
-      if not xRange: xRange = (self.GetRanges()[0], self.GetRanges()[2])
-      
-      low,high = (None,None)
-
-      #down
-      higher = self.Eval( xCenter ) > otherGraph.Eval( xCenter )
-      for i in range( steps+1 ):
-         #x = xRange[0] + float(i)*( xRange[1]-xRange[0] ) / steps
-         x = xCenter - float(i)*( xCenter-xRange[0] ) / steps
-         
-         newHigher = self.Eval( x ) > otherGraph.Eval( x )
-         if higher != newHigher:
-            low = x
-            break
-         higher = newHigher
-      #up
-      higher = self.Eval( xCenter ) > otherGraph.Eval( xCenter )
-      for i in range( steps+1 ):
-         #x = xRange[0] + float(i)*( xRange[1]-xRange[0] ) / steps
-         x = xCenter + float(i)*( xRange[1]-xCenter ) / steps
-         
-         newHigher = self.Eval( x ) > otherGraph.Eval( x )
-         if higher != newHigher:
-            high = x
-            break
-         higher = newHigher
-         
-      return (low,high)
-      
-   def getFirstIntersectionsWithValue( self, value, xVar=None, xCenter=None, xRange=None, steps=1000 ):
-      """ xRange must be of the form (min,max) when given """
-      if xVar and not xRange: xRange = (xVar.getMin(), xVar.getMax())
-      if xVar and not xCenter: xCenter = xVar.getVal()
-      if not xRange: xRange = (self.GetRanges()[0], self.GetRanges()[2])
-      
-      low,high = (None,None)
-
-      #down
-      higher = self.Eval( xCenter ) > value
-      for i in range( steps+1 ):
-         #x = xRange[0] + float(i)*( xRange[1]-xRange[0] ) / steps
-         x = xCenter - float(i)*( xCenter-xRange[0] ) / steps
-         
-         newHigher = self.Eval( x ) > value
-         if higher != newHigher:
-            low = x
-            break
-         higher = newHigher
-      #up
-      higher = self.Eval( xCenter ) > value
-      for i in range( steps+1 ):
-         #x = xRange[0] + float(i)*( xRange[1]-xRange[0] ) / steps
-         x = xCenter + float(i)*( xRange[1]-xCenter ) / steps
-         
-         newHigher = self.Eval( x ) > value
-         if higher != newHigher:
-            high = x
-            break
-         higher = newHigher
-         
-      return (low,high)
-      
-   def getLatexIntervalFromNll( self, minX, up=0.5, xRange=None, steps=1000, digits=2 ):
-      """ The parameter up is the same as in a Minos scan (0.5 for nll
-and 68% two sided intervals). """
-      
-      mInterval = self.getFirstIntersectionsWithValue( up, xCenter=minX, xRange=xRange, steps=steps )
-      fF = "%."+str(digits)+"f" # float Format
-      return ( (fF+"^{+"+fF+"}_{"+fF+"}") % (minX,mInterval[1]-minX,mInterval[0]-minX) )
-      
-      
-
-
-class Band( ROOT.TGraph ):
-   def __init__( self, x, yLow, yHigh, style="full", fillColor=None, lineColor=None, lineStyle=None, lineWidth=None, shiftBand=None ):
-      """Possible styles: full, upperEdge, lowerEdge"""
-      
-      if style not in ["full", "upperEdge", "lowerEdge"]:
-         print( "Style unknown. Using \"full\"." )
-         style = "full"
-      if len(x) != len(yLow) or len(x) != len(yHigh):
-         print( "x, yLow and yHigh have to have the same length." )
-         return
-         
-      if shiftBand:
-         yLow = [y+s for y,s in zip(yLow,shiftBand)]
-         yHigh = [y+s for y,s in zip(yHigh,shiftBand)]
-         
-      if style=="full":
-         band_values = sorted([(v[0],v[1]) for v in zip(x,yLow)])
-         band_values += sorted([(v[0],v[1]) for v in zip(x,yHigh)], reverse=True)
-         ROOT.TGraph.__init__( self, len(band_values), array('f',[v[0] for v in band_values]), array('f',[v[1] for v in band_values]) )
-         self.SetLineWidth(0)
-         
-      if style=="upperEdge":
-         band_values = [(v[0],v[1]) for v in zip(x,yHigh)]
-         ROOT.TGraph.__init__( self, len(band_values), array('f',[v[0] for v in band_values]), array('f',[v[1] for v in band_values]) )
-      
-      if style=="lowerEdge":
-         band_values = [(v[0],v[1]) for v in zip(x,yLow)]
-         ROOT.TGraph.__init__( self, len(band_values), array('f',[v[0] for v in band_values]), array('f',[v[1] for v in band_values]) )
-
-      if fillColor:
-         self.SetFillColor( fillColor )
-      if lineColor:
-         self.SetLineColor( lineColor )
-      if lineStyle:
-         self.SetLineStyle( lineStyle )
-      if lineWidth:
-         self.SetLineWidth( lineWidth )
-      
-      
-
-def DrawLine( x1,y1,x2,y2, lineWidth=None, lineStyle=None, lineColor=None, NDC=False ):
-   l = ROOT.TLine( x1,y1,x2,y2 )
-   if lineWidth: l.SetLineWidth( lineWidth )
-   if lineStyle: l.SetLineStyle( lineStyle )
-   if lineColor: l.SetLineColor( lineColor )
-   
-   if NDC:
-      l.DrawLineNDC( x1,y1,x2,y2 )
-   else:
-      l.Draw()
-   
-   return l
-
-def DrawHLine( y, lineWidth=None, lineStyle=None, lineColor=None ):
-   ROOT.gPad.Update()
-   x1,y1,x2,y2 = ( ROOT.Double(),ROOT.Double(),ROOT.Double(),ROOT.Double() )
-   ROOT.gPad.GetRangeAxis( x1,y1, x2,y2 )
-   return DrawLine(
-      x1,y, x2,y,
-      lineWidth, lineStyle, lineColor,
-   )
-
-def DrawVLine( x, lineWidth=None, lineStyle=None, lineColor=None ):
-   ROOT.gPad.Update()
-   x1,y1,x2,y2 = ( ROOT.Double(),ROOT.Double(),ROOT.Double(),ROOT.Double() )
-   ROOT.gPad.GetRangeAxis( x1,y1, x2,y2 )
-   return DrawLine(
-      x,y1, x,y2,
-      lineWidth, lineStyle, lineColor,
-   )
-   
-def DrawBox( x1,y1, x2,y2, fillColor=None, lineColor=None, lineWidth=None, lineStyle=None ):
-   b = ROOT.TBox( x1,y1, x2,y2 )
-   if fillColor: b.SetFillColor( fillColor )
-   if lineColor: b.SetLineColor( lineColor )
-   if lineStyle: b.SetLineColor( lineStyle )
-   if lineWidth: b.SetLineColor( lineWidth )
-   b.Draw()
-   return b
-
-
-def DrawTextOneLine( x, y, text, textColor = 1, textSize = 0.04, NDC = True, halign = "left", valign = "bottom", skipLines = 0 ):
-   """ This is just a helper. Don't use. Use DrawText instead. """
-   
-   halignMap = {"left":1, "center":2, "right":3}
-   valignMap = {"bottom":1, "center":2, "top":3}
-   
-   scaleLineHeight = 1.0
-   if valign == "top": scaleLineHeight = 0.8
-   if skipLines: text = "#lower[%.1f]{%s}" % (skipLines*scaleLineHeight,text)
-   
-   # Draw the text quite simply:
-   import ROOT
-   l = ROOT.TLatex()
-   if NDC: l.SetNDC()
-   l.SetTextAlign( 10*halignMap[halign] + valignMap[valign] )
-   l.SetTextColor( textColor )
-   l.SetTextSize( textSize )
-   l.DrawLatex( x, y, text )
-   return l
-   
-def DrawText( x, y, text, textColor = 1, textSize = 0.04, NDC = True, halign = "left", valign = "bottom" ):
-   objs = []
-   skipLines = 0
-   for line in text.split('\n'):
-      objs.append( DrawTextOneLine( x, y, line, textColor, textSize, NDC, halign, valign, skipLines ) )
-      if NDC == True: y -= 0.05 * textSize/0.04
-      else:
-         skipLines += 1
-      
-   return objs
-
-def DrawTextAligned( x,y, textList, halignList=["right","center","left"], textColor = 1, textSize = 0.04, NDC = True, valign="bottom" ):
-   """ use to write a = b and c = d under each other with the equal signs aligned """
-   objs = []
-   for text,halign in zip( textList, halignList ):
-      objs.append( DrawText( x,y, text, textColor, textSize, NDC, halign, valign ) )
-   return objs
-
+def draw_hist_from_chain(chain, br_name, cut, hist_name, bin_list):
+    nbins = len(bin_list) - 1
+    h1 = ROOT.TH1F(hist_name, hist_name, nbins, array('f', bin_list))
+    chain.Draw(br_name+">>"+hist_name, cut)
+    h1.SetDirectory(0)
+    return h1
diff --git a/scripts/jetsmearing.py b/scripts/jetsmearing.py
index 830e417..397453e 100755
--- a/scripts/jetsmearing.py
+++ b/scripts/jetsmearing.py
@@ -32,185 +32,7 @@ lumi_list = [979.768*1E-3, 1441.75*1E-3,  5357.85*1E-3, 10698.3*1E-3,
 unprescaled_lumi = 3316.68
 
 debug = False
-class HistMgr:
-    def __init__(self, tag_name):
-        self.tag = tag_name
-        all_list = []
-        met_xbins = [50, 100, 125, 150, 175, 
-                     200, 225, 250, 275, 300, 350, 400,
-                     450, 500, 600, 800, 1000]
-        all_list.append(self.create_hist_tuple("met", met_xbins))
-        all_list.append(self.create_hist_tuple("jetpt", met_xbins))
-        all_list.append(self.create_hist_tuple("njets", 11, -0.5, 10.5))
-        all_list.append(self.create_hist_tuple("met_sig", 100, 0, 10))
-        all_list.append(self.create_hist_tuple("dphi", 64, 0, 3.2))
-        all_list.append(self.create_hist_tuple("dphiEP", 64, 0, 3.2))
-        all_list.append(self.create_hist_tuple("Rmet_pt", 40, 0, 4))
-        self.list_dic = dict(all_list)
 
-    def create_hist_tuple(self, name, nbins, low, high):
-        res_list = []
-        for trig in triggers:
-            hist_name = "h_"+self.tag+"_"+name+"_"+trig
-            res_list.append(
-                ROOT.TH1F(hist_name, hist_name, nbins, low, high)
-            )
-        return (name, res_list)
-
-    def create_hist_tuple(self, name, bin_list):
-        res_list = []
-        nbins = len(bin_list) - 1 
-        for trig in triggers:
-            hist_name = "h_"+self.tag+"_"+name+"_"+trig
-            res_list.append(
-                ROOT.TH1F(hist_name, hist_name, nbins, array('f', bin_list))
-            )
-        return (name, res_list)
-        
-
-    def fill(self, itrig, weight, **data):
-        for key,value in data.iteritems():
-            all_list[key][itrig].Fill(value, weight)
-    
-    def merged_hists(self):
-        hist_list = []
-        for name, hist_trig_list in self.list_dic.iteritems():
-            hist_list.append(self.add_hist(hist_trig_list, self.tag+"_"+name))
-        return hist_list
-
-    @staticmethod
-    def add_hist(hist_list, hist_name):
-        icount = 0
-        for hist in hist_list:
-            if icount == 0:
-                all_hist = hist.Clone(hist_name)
-            else:
-                all_hist.Add(hist)
-            icount += 1
-        return all_hist
-
-class jetsmearing:
-    def __init__(self):
-        print "Using Jet Smearing"
-        self.seed_hists = HistMgr("seed")
-        self.all_hists = HistMgr("all")
-        self.smeared_hists = HistMgr("smeared")
-
-    def pass_trigger(self):
-        chain = self.chain
-        return chain.trig_j100 or chain.trig_j110 or chain.trig_j150 or\
-                chain.trig_j175 or chain.trig_j200 or chain.trig_j260 or\
-                chain.trig_j300 or chain.trig_j320\
-                or chain.trig_j360 or chain.trig_j400
-
-    def pass_trig_only(self, trig_name):
-        icount = 0
-        out = True
-        for trig in triggers:
-            res = getattr(self.chain, trig.replace("HLT","trig"))
-            if trig == trig_name:
-                out = res and out
-            else:
-                out = not res and out
-        return out
-
-    def is_seed_events(self):
-        ch = self.chain
-        met_sig = ch.MET_et/1e3/math.sqrt(ch.MET_sumet/1e3)
-        return met_sig < 0.7 and ch.n_base_el == 0 and ch.n_base_mu == 0 
-        #and ch.n_good_jet < 5 and ch.n_good_jet > 0 
-
-    def read_file(self, file_name, out_name):
-        self.chain = ROOT.loader(file_name, "physics")
-        ch = self.chain
-        nentries = ch.GetEntries()
-        hists_met = []
-        for ientry in range(nentries):
-        #for ientry in range(10000):
-            ch.GetEntry(ientry)
-            ch.LoadTree(ientry)
-
-            #if ientry % 10000 == 0: print ientry
-            icount = 0
-            jet_pt = ch.jet_p4[0].Pt()/1E3
-            dphi_EP = abs(ROOT.TVector2.Phi_mpi_pi(ch.MET_phi-ch.MET_trk_phi))
-            met_sig = ch.MET_et/1e3/math.sqrt(ch.MET_sumet/1e3)
-            met = ch.MET_et/1E3
-            data_dic = {"met": met,
-                        "jetpt": jet_pt,
-                        "njets": ch.n_good_jet,
-                        "met_sig": met_sig,
-                        "dphi": ch.min_dphi_jetMET,
-                        "dphiEP": dphi_EP,
-                        "Rmet_pt": met/jet_pt,
-                       }
-            for trig,lumi in zip(triggers, lumi_list):
-                weight = unprescaled_lumi/lumi
-                if self.pass_trig_only(trig):
-                    if jet_pt < 150: continue
-
-                    self.all_hists.fill(icount, weight, data_dic)
-                    if self.is_seed_events():
-                        self.seed_hists.fill(icount, weight, data_dic)
-                        self.fill_pseudo_data(icount, weight)
-
-        fout = ROOT.TFile.Open(out_name, "recreate")
-        for hist in self.all_hists.merged_hists():
-            hist.Write()
-        for hist in self.seed_hists.merged_hists():
-            hist.Write()
-        for hist in self.smeared_hists.merged_hists():
-            hist.Write()
-        fout.Close()
-
-    def fill_pseudo_data(self, icount, weight):
-        for data in self.chain.pseudoData:
-            met_sig = data.met_/1E3/math.sqrt(data_sumet_/1E3)
-            data_dic = {"met": data.met_/1E3,
-                        "jetpt": data.leading_jet_pt_/1E3,
-                        "njets": data.n_good_jets_,
-                        "met_sig": met_sig,
-                        "dphi": data.min_jets_met_,
-                        "dphiEP": data.dphi_EP_,
-                        "Rmet_pt": data.met_/data.leading_jet_pt_,
-                       }
-            self.smeared_hists.fill(icount, weight, data_dic)
-
-    def process(self, file_name):
-        out_name = "smeared_hist.root"
-        self.read_file(file_name, out_name)
-  
-    @staticmethod
-    def save_plot(file_name):
-        file_in = ROOT.TFile.Open(file_name, "read")
-        canvas = ROOT.TCanvas("canvas", "canvas", 600, 600)
-        for key in file_in.GetListOfKeys():
-            h1 = file_in.Get(key.GetName())
-            if not h1.InheritsFrom("TH1"): continue
-            h1.Draw()
-            canvas.SaveAs("eps/"+key.GetName()+".eps")
-
-    @staticmethod
-    def compare_all_smeared(file_name):
-        file_in = ROOT.TFile.Open(file_name, "read")
-        hist_base_names = ["met", "jetpt", "njets", "met_sig", "dphi", "dphiEP"]
-        shape_only = True
-        for hist_name in hist_base_names:
-            h1_name = "all_"+hist_name
-            h2_name = "smeared_"+hist_name
-            h3_name = "seed_"+hist_name
-            h1 = file_in.Get(h1_name)
-            h2 = file_in.Get(h2_name)
-            h3 = file_in.Get(h3_name)
-            h1.SetMarkerSize(0.05)
-            h2.SetMarkerSize(0.05)
-            h3.SetMarkerSize(0.05)
-            hist_tlist = ROOT.TList()
-            hist_tlist.Add(h2) 
-            hist_tlist.Add(h3) 
-            hist_tlist.Add(h1)
-            ROOT.compare_hists(hist_tlist, hist_name, shape_only, True, True)
-   
 class MiniTree:
     def __init__(self):
         pass
@@ -256,8 +78,9 @@ class MiniTree:
                 print trigger," ",lb_in," weight: ",result
         #if result > 1: result /= (55/1.5)
         return result
-
-    def find_right_trigger(self, chain):
+    
+    @staticmethod
+    def find_right_trigger(chain):
         pt = chain.jet_p4[0].Pt()/1E3
         if chain.trig_j400 and pt > 430:
             return "HLT_j400"
@@ -275,7 +98,12 @@ class MiniTree:
             return "HLT_j110"
         else:
             return None
-        
+
+    @staticmethod
+    def get_met_sig(chain):
+        #return (chain.MET_et/1E3 - 8)/math.sqrt(chain.MET_sumet/1E3)
+        return (chain.MET_et/1E3)/math.sqrt(chain.MET_sumet/1E3)
+
     def change_file(self, file_name, start_n):
         chain = ROOT.loader(file_name, "physics")
         nentries = chain.GetEntries()
@@ -284,6 +112,7 @@ class MiniTree:
         outfile = ROOT.TFile.Open(out_name, "recreate")
         #outtree = chain.CloneTree(0)
         outtree = ROOT.TTree("smeared", "smeared")
+        seedtree = ROOT.TTree("seed", "seed")
         met = array('f', [0])
         jetpt = array('f', [0])
         njets = array('i', [0])
@@ -293,6 +122,7 @@ class MiniTree:
         run_number = array('i', [0])
         event_number = array('i', [0])
         lb = array('i', [0])
+        weight = array('f', [0])
         outtree.Branch('met_et', met, 'met_et/F')
         outtree.Branch('njets', njets, 'njets/I')
         outtree.Branch('leading_jet_pt', jetpt, 'leading_jet_pt/F')
@@ -302,21 +132,57 @@ class MiniTree:
         outtree.Branch('run', run_number, 'run/I')
         outtree.Branch('event', event_number, 'event/I')
         outtree.Branch('lb', lb, 'lb/I')
-        weight = array('f', [0])
         outtree.Branch('weight', weight, 'weight/F')
+    
+        seedtree.Branch('met_et', met, 'met_et/F')
+        seedtree.Branch('njets', njets, 'njets/I')
+        seedtree.Branch('leading_jet_pt', jetpt, 'leading_jet_pt/F')
+        seedtree.Branch('min_dphi', dphi, 'min_dphi/F')
+        #seedtree.Branch("dphi_ep", dphiEP, 'dphi_ep/F')
+        #seedtree.Branch('rmet_pt', rmet_pt, 'rmet_pt/F')
+        seedtree.Branch('run', run_number, 'run/I')
+        seedtree.Branch('event', event_number, 'event/I')
+        seedtree.Branch('lb', lb, 'lb/I')
+        seedtree.Branch('weight', weight, 'weight/F')
+
+        met_sig_br = array('f', [0])
+        frac_soft_br = array('f', [0])
+        seedtree.Branch("met_sig", met_sig_br, 'met_sig/F')
+        seedtree.Branch("frac_soft", frac_soft_br, 'frac_soft/F')
 
         for ientry in range(1000):
             ientry = start_n + ientry
             if chain.LoadTree(ientry) < 0:
                 break
             chain.GetEntry(ientry)
+            #check trigger
+            trigger = self.find_right_trigger(chain)
+            if trigger:
+                weight[0] = self.find_weight(trigger, chain.lumiblock)
+            else:
+                continue
+            #apply lepton veto
+            if chain.n_base_el > 0 or chain.n_base_mu > 0:
+                continue
             #select the seed events
-            met_sig =  chain.MET_et/1E3/math.sqrt(chain.MET_sumet/1E3)
+            met_sig =  self.get_met_sig(chain)
+            frac_soft = chain.MET_et_soft/chain.MET_et
+            frac_soft_br[0] = frac_soft
+
+            met_sig_br[0] = met_sig
             run_number[0] = chain.RunNumber
             event_number[0] = chain.EventNumber
             lb[0] = chain.lumiblock
             jet_pt_origin = chain.jet_p4[0].Pt()
-            if met_sig < 0.7 and chain.n_base_el ==0 and chain.n_base_mu ==0:
+            met[0] = chain.MET_et/1E3
+            jetpt[0] = jet_pt_origin/1E3
+            njets[0] = chain.n_good_jet
+            dphi[0] = chain.min_dphi_jetMET
+            seedtree.Fill()
+
+
+            if met_sig < 0.7 and chain.n_base_el ==0 and chain.n_base_mu ==0\
+               and frac_soft < 0.1:
                 for data in chain.pseudoData:
                     met[0] = data.met_/1E3
                     jetpt[0] = data.leading_jet_pt_/1E3
@@ -324,14 +190,10 @@ class MiniTree:
                     dphi[0] = data.min_jets_met_
                     dphiEP[0] = data.dphi_EP_
                     rmet_pt[0] = data.met_/data.leading_jet_pt_
-                    trigger = self.find_right_trigger(chain)
-                    if trigger:
-                        weight[0] = self.find_weight(trigger, chain.lumiblock)
-                    else:
-                        weight[0] = 0.
                     outtree.Fill()
         outfile.cd()
         outtree.Write()
+        seedtree.Write()
         outfile.Close()
 
 def test_minitree(start_n, data_list, ps_file_name):
@@ -341,16 +203,15 @@ def test_minitree(start_n, data_list, ps_file_name):
 
 if __name__ == "__main__":
     file_name = ""
-    ##jetsmear = jetsmearing()
-    #jetsmear.compare_all_smeared("smeared_hist.root")
-    #jetsmear.process('data_smeared.list')
-    #jetsmear.process('reduced_ntup.root')
     threads = []
     ps_file_name = "284484_ps.txt"
     data_list = "../testarea/data_smeared.list"
     if len(sys.argv) > 2:
         ps_file_name = sys.argv[1]
         data_list = sys.argv[2]
+    else:
+        print sys.argv[0]," ps_file data_list"
+        sys.exit(0)
     
     print ps_file_name,data_list
     ch = ROOT.loader(data_list, "physics")
diff --git a/scripts/plot_from_hist.cxx b/scripts/plot_from_hist.cxx
index ca001ec..76a2d94 100644
--- a/scripts/plot_from_hist.cxx
+++ b/scripts/plot_from_hist.cxx
@@ -45,7 +45,9 @@ public:
         f_data = TFile::Open(Form("%sdata_combined.root",base_dir.c_str()), "READ");
         f_data2 = TFile::Open(Form("%sdata_combined.root",base_dir.c_str()), "READ");
         // f_data2 = TFile::Open(Form("%sdata_no_leading.root",base_dir.c_str()), "READ");
-        f_signal = TFile::Open(Form("%ssignal_combined.root",base_dir.c_str()), "READ");
+        //
+        // f_signal = TFile::Open(Form("%ssignal_combined.root",base_dir.c_str()), "READ");
+        f_signal = NULL;
         
     }
     
@@ -59,7 +61,8 @@ public:
         h_dijets = (T*) f_dijets->Get(hist_name);
         h_data = (T*) f_data->Get(hist_name);
         h_data2 = (T*) f_data2->Get(hist_name);
-        h_signal = (T*) f_signal->Get(hist_name);
+        if(f_signal) h_signal = (T*) f_signal->Get(hist_name);
+        cout <<"got histograms"<<endl;
 
         // weight
         Option_t* option = "";
@@ -73,8 +76,8 @@ public:
         h_top->Scale(weight*add_weight, option);
         h_vv->Scale(weight*add_weight, option);
         // h_dijets->Scale(weight*7.848206e+00);
-        h_dijets->Scale(weight*add_weight, option);
-        h_signal->Scale(weight, option);
+        h_dijets->Scale(weight*add_weight*2.087575e-04*1.073483e+00*6.313839e-01, option);
+        if(h_signal) h_signal->Scale(weight, option);
         h_data->Sumw2();
         h_data->Scale(1., option);
 
@@ -86,6 +89,7 @@ public:
 
         h_bkg= (T*) h_bkg_no_dijets->Clone("h_bkg");
         h_bkg->Add(h_dijets);
+        cout << " histograms loaded" << endl;
     }
     
     void do_plot(const char* hist_name)
@@ -98,7 +102,7 @@ public:
         tokenize_histname(hist_name, var_name, met_cut, region_name);
 
         TCanvas* canvas = new TCanvas("canvas", "canvas", 600, 600);
-        SetAtlasStyle(canvas);
+        SetAtlasStyleCanvas(canvas);
         // decoration
         h_znunu->SetLineColor(206);
         h_wlnu ->SetLineColor(64);
@@ -106,7 +110,10 @@ public:
         h_vv ->SetLineColor(28);
         h_dijets ->SetLineColor(29);
         h_top->SetLineColor(209);
-        h_signal->SetLineColor(2);
+        if(h_signal){ 
+            h_signal->SetLineColor(2);
+            h_signal->SetFillColor(2);
+        }
 
         //****
         h_znunu->SetFillColor(206);
@@ -115,7 +122,6 @@ public:
         h_vv ->SetFillColor(28);
         h_dijets ->SetFillColor(29);
         h_top->SetFillColor(209);
-        h_signal->SetFillColor(2);
         //****/
         h_data->SetMarkerStyle(20);
         h_data->SetMarkerSize(1.2);
@@ -135,7 +141,7 @@ public:
 
         // print the information
         printf("data: %.f\n", h_data->Integral());
-        printf("signal: %.2f\n", h_signal->Integral());
+        if(h_signal) printf("signal: %.2f\n", h_signal->Integral());
         printf("Bkg: %.2f\n", h_bkg->Integral());
         printf("Znunu: %.2f\n", h_znunu->Integral());
         printf("Wjets: %.2f\n", h_wlnu->Integral());
@@ -152,7 +158,7 @@ public:
             printf("Low: %d, Hi: %d\n", low_bin, hi_bin);
             printf("Efficiency (dphi_met_mpt):\nn");
             printf("data: %.2f\n", h_data->Integral(low_bin, hi_bin)/h_data->Integral());
-            printf("signal: %.2f\n", h_signal->Integral(low_bin, hi_bin)/h_signal->Integral());
+            if(h_signal) printf("signal: %.2f\n", h_signal->Integral(low_bin, hi_bin)/h_signal->Integral());
             printf("Znunu: %.2f\n", h_znunu->Integral(low_bin, hi_bin)/h_znunu->Integral());
             printf("Wjets: %.2f\n", h_wlnu->Integral(low_bin, hi_bin)/h_wlnu->Integral());
             printf("Zjets: %.2f\n", h_zll->Integral(low_bin, hi_bin)/h_zll->Integral());
@@ -164,7 +170,7 @@ public:
 
         printf("--------------------\n");
         printf("data: %.f\n", h_data->GetEntries());
-        printf("signal: %.2f\n", h_signal->GetEntries());
+        if(h_signal) printf("signal: %.2f\n", h_signal->GetEntries());
         printf("Znunu: %.2f\n", h_znunu->GetEntries());
         printf("Wjets: %.2f\n", h_wlnu->GetEntries());
         printf("Zjets: %.2f\n", h_zll->GetEntries());
@@ -245,13 +251,14 @@ public:
         legend->AddEntry(h_zll, "Z #rightarrow #it{l}#it{l}", "fl");
         legend->AddEntry(h_vv, "Diboson", "fl");
         legend->AddEntry(h_top, "t#bar{t} + single top", "fl");
-        legend->AddEntry(h_dijets, "Dijets", "fl");
+        legend->AddEntry(h_dijets, "Multi-jet", "fl");
         legend->Draw();
         float x_off_title = 0.22;
         // myText(x_off_title, 0.85, 1, "#bf{#it{ATLAS}} Internal");
         myText(x_off_title, 0.85, 1, "#bf{#it{ATLAS}} Work In Progress");
         myText(x_off_title-0.04, 0.80, 1, Form("#sqrt{s} = 13 TeV: #scale[0.55]{#int}Ldt = %.1f fb^{-1}", weight/1e3));
-        myText(x_off_title, 0.75, 1, Form("%s, E_{T}^{miss}> %s GeV", region_name.c_str(), met_cut.c_str()));
+        // myText(x_off_title, 0.75, 1, Form("%s, E_{T}^{miss}> %s GeV", region_name.c_str(), met_cut.c_str()));
+        myText(x_off_title, 0.75, 1, Form("QCD, E_{T}^{miss}> %s GeV", met_cut.c_str()));
 
         TString outeps_name(Form("eps/%s", hist_name));
         if(use_log) outeps_name += "_log";
@@ -321,7 +328,7 @@ public:
         #endif 
 
         TCanvas* canvas = new TCanvas("canvas", "canvas", 600, 600);
-        SetAtlasStyle(canvas);
+        SetAtlasStyleCanvas(canvas);
 
         h_data->GetXaxis()->SetTitle("#Delta#phi(jets, E_{T}^{miss}) [rad]");
         h_data->GetYaxis()->SetTitle("#Delta#phi(E_{T}^{miss}, #vec{p}_{T}^{miss}) [rad]");
@@ -627,7 +634,7 @@ public:
     T* h_data2;
     T* h_bkg_no_dijets;
     T* h_bkg;
-    T* h_signal;
+    T* h_signal = NULL;
     TFile* f_znunu;
     TFile* f_wlnu;
     TFile* f_zll;
@@ -636,7 +643,7 @@ public:
     TFile* f_dijets;
     TFile* f_data;
     TFile* f_data2;
-    TFile* f_signal;
+    TFile* f_signal = NULL;
 
 };
 
@@ -660,7 +667,7 @@ void go_plot(int cut_tag, const char* region)
     hist_mgr_1d->do_plot(Form("met_%s_%d", region, cut_tag));
     hist_mgr_1d->do_plot(Form("ljetPt_%s_%d", region, cut_tag));
     hist_mgr_1d->do_plot(Form("dphi_%s_%d", region, cut_tag));
-    hist_mgr_1d->do_plot(Form("dphiEP_%s_%d", region, cut_tag));
+    // hist_mgr_1d->do_plot(Form("dphiEP_%s_%d", region, cut_tag));
     hist_mgr_1d->do_plot(Form("njets_%s_%d", region, cut_tag));
     // hist_mgr_1d->do_plot(Form("met_SR_%d", cut_tag));
     // hist_mgr_1d->do_plot(Form("met_ZEE_%d", cut_tag));
diff --git a/util/Group_8TeV_SUSYTools.cxx b/util/Group_8TeV_SUSYTools.cxx
index d857c9b..70f7d00 100644
--- a/util/Group_8TeV_SUSYTools.cxx
+++ b/util/Group_8TeV_SUSYTools.cxx
@@ -225,21 +225,25 @@ int main( int argc, char* argv[] )
     TH2F* bJetResponse = NULL;
     const std::string smearJet = "smearjet";
     if (do_smear) {
-        unsigned int test = 1000;
+        unsigned int test = 5000;
 
         m_mySmearingTool = new SUSY::JetMCSmearingTool("MySmearingTool");
         m_mySmearingTool->setProperty("NumberOfSmearedEvents",test);
         m_mySmearingTool->initialize();
 
-        std::string input_light_jet(maindir+"/data/JetSmearing/MC15/R_map2015_bveto_OP77_EJES_p2411.root");
+        // std::string input_light_jet(maindir+"/data/JetSmearing/MC15/R_map2015_bveto_OP77_EJES_p2411.root");
+        std::string input_light_jet(maindir+"/data/JetSmearing/MC15/R_map2015_bveto_OP77_WEJES_p1886.root");
         TFile* lightJetFile = TFile::Open(input_light_jet.c_str(), "read");
-        lightJetResponse = (TH2F*)lightJetFile->Get("responseEJES_p2411");
+        //lightJetResponse = (TH2F*)lightJetFile->Get("responseEJES_p2411");
+        lightJetResponse = (TH2F*)lightJetFile->Get("responseWEJES_p1886");
         lightJetResponse->SetDirectory(0);
         lightJetFile->Close();
 
-        std::string input_bjet(maindir+"/data/JetSmearing/MC15/R_map2015_btag_OP77_EJES_p2411.root");
+        // std::string input_bjet(maindir+"/data/JetSmearing/MC15/R_map2015_btag_OP77_EJES_p2411.root");
+        std::string input_bjet(maindir+"/data/JetSmearing/MC15/R_map2015_btag_OP77_WEJES_p1886.root");
         TFile* bJetFile = TFile::Open(input_bjet.c_str(), "read");
-        bJetResponse = (TH2F*)bJetFile->Get("responseEJES_p2411");
+        // bJetResponse = (TH2F*)bJetFile->Get("responseEJES_p2411");
+        bJetResponse = (TH2F*)bJetFile->Get("responseWEJES_p1886");
         bJetResponse->SetDirectory(0);
         bJetFile->Close();
 
