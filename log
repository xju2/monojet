diff --git a/Root/LinkDef.h b/Root/LinkDef.h
index fc5db2c..f62dd61 100644
--- a/Root/LinkDef.h
+++ b/Root/LinkDef.h
@@ -1,5 +1,5 @@
-#ifndef WiscAnalysis_LINKDEF_H
-#define WiscAnalysis_LINKDEF_H
+#ifndef MONOJET_LINKDEF_H
+#define MONOJET_LINKDEF_H
 
 #include <MonoJet/MyCuts.h>
 #include <MonoJet/OutputTreeMan.h>
diff --git a/Root/OutputTreeMan.cxx b/Root/OutputTreeMan.cxx
index a2eaef3..9c04e60 100644
--- a/Root/OutputTreeMan.cxx
+++ b/Root/OutputTreeMan.cxx
@@ -214,6 +214,8 @@ void OutputTreeMan::AddBranches2Tree(TTree& MyTree)
     MyTree.Branch("MET_et", &MET_et, "MET_et/D");
     MyTree.Branch("MET_ecorr", &MET_et_noEE, "MET_ecorr/D");
     MyTree.Branch("MET_sumet", &MET_sumet_, "MET_sumet/D");
+    MyTree.Branch("MET_sumet_noMuon", &MET_sumet_noMuon_, "MET_sumet_noMuon/D");
+    MyTree.Branch("MET_et_soft", &MET_et_soft_, "MET_et_soft/D");
 
     MyTree.Branch("MET_mu_etx", &MET_mu_etx_,     "MET_mu_etx/D");
     MyTree.Branch("MET_mu_ety", &MET_mu_ety_,     "MET_mu_ety/D");
diff --git a/cmt/Makefile.RootCore b/cmt/Makefile.RootCore
index 4a1d8f6..c675138 100644
--- a/cmt/Makefile.RootCore
+++ b/cmt/Makefile.RootCore
@@ -10,7 +10,7 @@
 PACKAGE          = MonoJet
 
 # the libraries to link with this one:
-PACKAGE_PRELOAD  = Tree RooFit
+PACKAGE_PRELOAD  = Tree RooFit AthContainers
 
 # additional compilation flags to pass (not propagated to dependent packages):
 PACKAGE_CXXFLAGS =
@@ -28,7 +28,7 @@ PACKAGE_BINFLAGS =
 PACKAGE_LIBFLAGS = 
 
 # the list of packages we depend on:
-PACKAGE_DEP      = PATCore CalibrationDataInterface GoodRunsLists PileupReweighting ReweightUtils TauCorrUncert xAODBase xAODEventInfo xAODEgamma xAODMuon xAODJet xAODTau xAODMissingET xAODTracking AsgTools PATInterfaces JetCalibTools JetResolution JetSelectorTools JetUncertainties ElectronPhotonFourMomentumCorrection ElectronEfficiencyCorrection MuonMomentumCorrections MuonEfficiencyCorrections MuonSelectorTools xAODBTaggingEfficiency TauAnalysisTools METUtilities METInterface SUSYTools AsgTools  CPAnalysisExamples JetMomentTools JetRec JetEDM MyXAODTools JetSmearing
+PACKAGE_DEP      = PATCore CalibrationDataInterface GoodRunsLists PileupReweighting ReweightUtils TauCorrUncert xAODBase xAODEventInfo xAODEgamma xAODMuon xAODJet xAODTau xAODMissingET xAODTracking AsgTools PATInterfaces JetCalibTools JetResolution JetSelectorTools JetUncertainties ElectronPhotonFourMomentumCorrection ElectronEfficiencyCorrection MuonMomentumCorrections MuonEfficiencyCorrections MuonSelectorTools xAODBTaggingEfficiency TauAnalysisTools METUtilities METInterface SUSYTools AsgTools  CPAnalysisExamples JetMomentTools JetRec JetEDM MyXAODTools JetSmearing AthContainers 
 # BCHCleaningTool TileTripReader
 # the list of packages we use if present, but that we can work without :
 PACKAGE_TRYDEP   = 
diff --git a/scripts/AtlasStyle.pyc b/scripts/AtlasStyle.pyc
index e50b39a..f933c82 100644
Binary files a/scripts/AtlasStyle.pyc and b/scripts/AtlasStyle.pyc differ
diff --git a/scripts/jetsmearing.py b/scripts/jetsmearing.py
old mode 100644
new mode 100755
index 5064888..c0ecd92
--- a/scripts/jetsmearing.py
+++ b/scripts/jetsmearing.py
@@ -9,7 +9,10 @@ ROOT.gROOT.SetBatch()
 if not hasattr(ROOT, "loader"):
     ROOT.gROOT.LoadMacro("/afs/cern.ch/user/x/xju/tool/loader.c") 
 
-ROOT.gSystem.Load(os.getenv("MonoJetCodeDir")+"RootCoreBin/lib/x86_64-slc6-gcc48-opt/libWiscAnalysis.so")
+ROOT.gROOT.LoadMacro(os.getenv("ROOTCOREBIN")+"/lib/x86_64-slc6-gcc48-opt/libCxxUtils.so")
+ROOT.gROOT.LoadMacro(os.getenv("ROOTCOREBIN")+"/lib/x86_64-slc6-gcc48-opt/libAthContainers.so")
+ROOT.gROOT.LoadMacro(os.getenv("ROOTCOREBIN")+"/lib/x86_64-slc6-gcc48-opt/libMonoJet.so")
+
 triggers = ["HLT_j100",  "HLT_j110",  "HLT_j150",  "HLT_j175",  "HLT_j200",
             "HLT_j260",  "HLT_j300",  "HLT_j320",  "HLT_j360"]
 # unit: ipb
@@ -17,59 +20,62 @@ lumi_list = [979.768*1E-3, 1441.75*1E-3,  5357.85*1E-3, 10698.3*1E-3,
               19701.4*1E-3, 68386.7*1E-3, 135.87, 191.304, 3316.68] 
 unprescaled_lumi = 3316.68
 
-class jetsmearing:
-    def __init__(self):
-        print "Using Jet Smearing"
-        self.seed_met_sig_list = []
-        self.seed_met_list = []
-        self.seed_jetpt_list = []
-        self.seed_njets_list = []
-        self.seed_dphi_list = []
-
-        self.met_sig_list = []
-        self.met_list = []
-        self.jetpt_list = []
-        self.njets_list = []
-        self.dphi_list = []
+class HistMgr:
+    def __init__(self, tag_name):
+        self.tag = tag_name
+        all_list = []
+        all_list.append(self.create_hist_tuple("met", 50, 0, 500))
+        all_list.append(self.create_hist_tuple("jetpt", 100, 0, 1000))
+        all_list.append(self.create_hist_tuple("njets", 11, -0.5, 10.5))
+        all_list.append(self.create_hist_tuple("met_sig", 100, 0, 10))
+        all_list.append(self.create_hist_tuple("dphi", 64, 0, 3.2))
+        all_list.append(self.create_hist_tuple("dphiEP", 64, 0, 3.2))
+        self.list_dic = dict(all_list)
+
+    def create_hist_tuple(self, name, nbins, low, high):
+        res_list = []
         for trig in triggers:
-            self.seed_met_list.append(
-                ROOT.TH1F("h_seed_met_"+trig, "E_{T}^{miss} GeV;Seed MET",50, 0, 500)
-            )
-            self.seed_met_sig_list.append(
-                ROOT.TH1F("h_seed_met_sig_"+trig, "S;MET significance", 100, 0, 10)
-            )
-            self.seed_jetpt_list.append(
-                ROOT.TH1F("h_seed_jetpt_"+trig,"", 100, 0, 1000)
-            )
-            self.seed_njets_list.append(
-                ROOT.TH1F("h_seed_njets_"+trig, " ", 10, 0, 10)
-            )
-            self.seed_dphi_list.append(
-                ROOT.TH1F("h_seed_dphi_"+trig, " ", 64, 0, 3.2)
+            hist_name = "h_"+self.tag+"_"+name+"_"+trig
+            res_list.append(
+                ROOT.TH1F(hist_name, hist_name, nbins, low, high)
             )
+        return (name, res_list)
+
+    def fill(self, itrig, weight, met, jet_pt, njets, met_sig, dphi, dphiEP):
+        self.met_list[itrig].Fill(met, weight)
+        self.jetpt_list[itrig].Fill(jet_pt, weight)
+        self.njets_list[itrig].Fill(njets, weight)
+        self.met_sig_list[itrig].Fill(met_sig, weight)
+        self.dphi_list[itrig].Fill(dphi, weight)
+        self.dphi_EP_list[itrig].Fill(dphiEP, weight)
+    
+    def merged_hists(self):
+        hist_list = []
+        hist_list.append(self.add_hist(self.met_list, self.tag+"_met"))
+        hist_list.append(self.add_hist(self.jetpt_list, self.tag+"_jetpt"))
+        hist_list.append(self.add_hist(self.njets_list, self.tag+"_njets"))
+        hist_list.append(self.add_hist(self.met_sig_list, self.tag+"_met_sig"))
+        hist_list.append(self.add_hist(self.dphi_list, self.tag+"_dphi"))
+        hist_list.append(self.add_hist(self.dphi_EP_list, self.tag+"_dphiEP"))
+        return hist_list
 
-            self.met_list.append(
-                ROOT.TH1F("h_met_"+trig, "E_{T}^{miss} GeV;Seed MET",50, 0, 500)
-            )
-            self.met_sig_list.append(
-                ROOT.TH1F("h_met_sig_"+trig, "S;MET significance", 100, 0, 10)
-            )
-            self.jetpt_list.append(
-                ROOT.TH1F("h_jetpt_"+trig,"", 100, 0, 1000)
-            )
-            self.njets_list.append(
-                ROOT.TH1F("h_njets_"+trig, " ", 10, 0, 10)
-            )
-            self.dphi_list.append(
-                ROOT.TH1F("h_dphi_"+trig, " ", 64, 0, 3.2)
-            )
+    @staticmethod
+    def add_hist(hist_list, hist_name):
+        icount = 0
+        for hist in hist_list:
+            if icount == 0:
+                all_hist = hist.Clone(hist_name)
+            else:
+                all_hist.Add(hist)
+            icount += 1
+        return all_hist
 
-        self.smeared_met = ROOT.TH1F("smeared_met", "Smeared MET", 200, 0, 2000)
-        self.smeared_jetpt = ROOT.TH1F("smeared_jetpt", "Smeared leading jet pt", 200, 0, 2000)
-        self.smeared_dphi = ROOT.TH1F("smeared_dphi", "Smeared dphi ", 64, 0, 3.2)
-        self.smeared_njets = ROOT.TH1F("smeared_njets", "Smeared njets", 10, 0, 10)
-        self.smeared_dphiEP = ROOT.TH1F("smeared_dphiEP", "Smeared dphi(MET,MPT)", 
-                                        64, 0, 32)
+class jetsmearing:
+    def __init__(self):
+        print "Using Jet Smearing"
+        self.seed_hists = HistMgr("seed")
+        self.all_hists = HistMgr("all")
+        self.smeared_hists = HistMgr("smeared")
 
     def pass_trigger(self):
         chain = self.chain
@@ -89,18 +95,6 @@ class jetsmearing:
                 out = not res and out
         return out
 
-    @staticmethod
-    def add_hist(hist_list, hist_name):
-        icount = 0
-        for hist in hist_list:
-            if icount == 0:
-                all_hist = hist.Clone(hist_name)
-            else:
-                all_hist.Add(hist)
-            icount += 1
-        return all_hist
-
-
     def is_seed_events(self):
         ch = self.chain
         met_sig = ch.MET_et/1e3/math.sqrt(ch.MET_sumet/1e3)
@@ -118,72 +112,78 @@ class jetsmearing:
             ch.LoadTree(ientry)
 
             #if ientry % 10000 == 0: print ientry
-            #self.fill_pseudo_data()
             icount = 0
             for trig,lumi in zip(triggers, lumi_list):
                 weight = unprescaled_lumi/lumi
                 if self.pass_trig_only(trig):
                     jet_pt = ch.jet_p4[0].Pt()/1E3;
                     if jet_pt < 150: continue
+                    dphi_EP = abs(ROOT.TVector2.Phi_mpi_pi(ch.MET_phi-ch.MET_trk_phi))
                     met_sig = ch.MET_et/1e3/math.sqrt(ch.MET_sumet/1e3)
-                    self.met_list[icount].Fill(ch.MET_et/1e3, weight)
-                    self.jetpt_list[icount].Fill(jet_pt, weight)
-                    self.njets_list[icount].Fill(ch.n_good_jet, weight)
-                    self.met_sig_list[icount].Fill(met_sig, weight)
-                    self.dphi_list[icount].Fill(ch.min_dphi_jetMET, weight)
+
+                    self.all_hists.fill(icount, weight,
+                                       ch.MET_et/1e3, jet_pt, ch.n_good_jet,
+                                       met_sig,ch.min_dphi_jetMET, dphi_EP)
                     if self.is_seed_events():
-                        self.seed_met_list[icount].Fill(ch.MET_et/1e3, weight)
-                        self.seed_jetpt_list[icount].Fill(jet_pt, weight)
-                        self.seed_njets_list[icount].Fill(ch.n_good_jet, weight)
-                        self.seed_met_sig_list[icount].Fill(met_sig, weight)
-                        self.seed_dphi_list[icount].Fill(ch.min_dphi_jetMET, weight)
+                        self.seed_hists.fill(icount, weight,
+                                       ch.MET_et/1e3, jet_pt, ch.n_good_jet,
+                                       met_sig,ch.min_dphi_jetMET, dphi_EP)
+                        self.fill_pseudo_data(icount, weight, met_sig)
+
         fout = ROOT.TFile.Open(out_name, "recreate")
-        self.add_hist(self.seed_met_list, "seed_met").Write()
-        self.add_hist(self.seed_jetpt_list, "seed_jetpt").Write()
-        self.add_hist(self.seed_njets_list, "seed_njets").Write()
-        self.add_hist(self.seed_met_sig_list, "seed_met_sig").Write()
-        self.add_hist(self.seed_dphi_list, "seed_dphi").Write()
-        self.add_hist(self.met_list, "met").Write()
-        self.add_hist(self.jetpt_list, "jetpt").Write()
-        self.add_hist(self.njets_list, "njets").Write()
-        self.add_hist(self.met_sig_list, "met_sig").Write()
-        self.add_hist(self.dphi_list, "dphi").Write()
-        self.smeared_met.Write()
-        self.smeared_jetpt.Write()
-        self.smeared_dphi.Write()
-        self.smeared_njets.Write()
-        self.smeared_dphiEP.Write()
+        for hist in self.all_hists.merged_hists():
+            hist.Write()
+        for hist in self.seed_hists.merged_hists():
+            hist.Write()
+        for hist in self.smeared_hists.merged_hists():
+            hist.Write()
         fout.Close()
 
-    def fill_pseudo_data(self):
+    def fill_pseudo_data(self, icount, weight, met_sig):
         for data in self.chain.pseudoData:
-            self.smeared_met.Fill(data.met_/1e3)
-            self.smeared_jetpt.Fill(data.leading_jet_pt_/1e3)
-            self.smeared_dphi.Fill(data.min_jets_met_)
-            self.smeared_njets.Fill(data.n_good_jets_)
-            self.smeared_dphiEP.Fill(data.dphi_EP_)
-
-    def save_hist(self, out_name):
-        file_out = ROOT.TFile.Open(out_name, "RECREATE")
-        for key, value in self.__dict__.items():
-            if value.InheritsFrom("TH1"): value.Write()
-        file_out.Close()
+            self.smeared_hists.fill(icount, weight, 
+                                    data.met_/1e3, data.leading_jet_pt_/1e3,
+                                    data.n_good_jets_, met_sig, 
+                                    data.min_jets_met_,data.dphi_EP_)
 
     def process(self, file_name):
         out_name = "smeared_hist.root"
         self.read_file(file_name, out_name)
-   
-def save_plot(file_name):
-    file_in = ROOT.TFile.Open(file_name, "read")
-    canvas = ROOT.TCanvas("canvas", "canvas", 600, 600)
-    for key in file_in.GetListOfKeys():
-        h1 = file_in.Get(key.GetName())
-        if not h1.InheritsFrom("TH1"): continue
-        h1.Draw()
-        canvas.SaveAs("eps/"+key.GetName()+".eps")
+  
+    @staticmethod
+    def save_plot(file_name):
+        file_in = ROOT.TFile.Open(file_name, "read")
+        canvas = ROOT.TCanvas("canvas", "canvas", 600, 600)
+        for key in file_in.GetListOfKeys():
+            h1 = file_in.Get(key.GetName())
+            if not h1.InheritsFrom("TH1"): continue
+            h1.Draw()
+            canvas.SaveAs("eps/"+key.GetName()+".eps")
+
+    @staticmethod
+    def compare_all_smeared(file_name):
+        file_in = ROOT.TFile.Open(file_name, "read")
+        hist_base_names = ["met", "jetpt", "njets", "met_sig", "dphi", "dphiEP"]
+        shape_only = True
+        for hist_name in hist_base_names:
+            h1_name = "all_"+hist_name
+            h2_name = "smeared_"+hist_name
+            h3_name = "seed_"+hist_name
+            h1 = file_in.Get(h1_name)
+            h2 = file_in.Get(h2_name)
+            h3 = file_in.Get(h3_name)
+            h1.SetMarkerSize(0.05)
+            h2.SetMarkerSize(0.05)
+            h3.SetMarkerSize(0.05)
+            hist_tlist = ROOT.TList()
+            hist_tlist.Add(h2) 
+            hist_tlist.Add(h3) 
+            hist_tlist.Add(h1)
+            ROOT.compare_hists(hist_tlist, hist_name, shape_only, True, True)
 
 if __name__ == "__main__":
     file_name = ""
     jetsmear = jetsmearing()
-    jetsmear.process('data.list')
+    jetsmear.compare_all_smeared("smeared_hist.root")
+    #jetsmear.process('data_smeared.list')
     #jetsmear.process('reduced_ntup.root')
diff --git a/util/Group_8TeV_SUSYTools.cxx b/util/Group_8TeV_SUSYTools.cxx
index 6327fd9..9dcc12c 100644
--- a/util/Group_8TeV_SUSYTools.cxx
+++ b/util/Group_8TeV_SUSYTools.cxx
@@ -201,12 +201,13 @@ int main( int argc, char* argv[] )
     vector<string> prw_conf;
     prw_conf.push_back(maindir+"/data/MyXAODTools/merged_prw_25ns_monojet_bkg_mc.root");
     prw_conf.push_back(maindir+"/data/MyXAODTools/merged_prw_monojet_signals.root");
+    CHECK( objTool.setProperty("DataSource", data_source) );
     CHECK( objTool.setProperty("PRWConfigFiles", prw_conf) );
 
     vector<string> prw_lumicalc;
     prw_lumicalc.push_back(maindir+"/data/MyXAODTools/ilumicalc_histograms_None_276262-284484.root");
     CHECK( objTool.setProperty("PRWLumiCalcFiles", prw_lumicalc) );
-    CHECK( objTool.setProperty("ConfigFile", Form("%s/data/MonoJet/monojet.conf", maindir.c_str())) );
+    CHECK( objTool.setProperty("ConfigFile", maindir+"/data/MonoJet/monojet.conf") );
 
     if( objTool.initialize() != StatusCode::SUCCESS){
         Error( APP_NAME, "Cannot intialize SUSYObjDef_xAOD..." );
@@ -444,7 +445,7 @@ int main( int argc, char* argv[] )
                         ) );
             xAOD::MissingETContainer::const_iterator met_it = met->find("Final");
 
-            if (met_it == met->end() )//  || met_it_muon == met->end() )
+            if (met_it == met->end() )
             {
                 Error( APP_NAME, "No RefFinal inside MET container" );
             }
@@ -453,6 +454,9 @@ int main( int argc, char* argv[] )
             output.MET_phi = (*met_it)->phi();
             output.MET_et  = (*met_it)->met();
             output.MET_sumet_ = (*met_it)->sumet();
+            xAOD::MissingETContainer::const_iterator met_muon_it = met->find("Muons");
+            output.MET_sumet_noMuon_ = output.MET_sumet_ - (*met_muon_it)->sumet();
+            output.MET_et_soft_ = (*(met->find("PVSoftTrk")))->met();
 
             /* ********
              * normal MET 
@@ -735,11 +739,11 @@ void get_smeared_info(ST::SUSYObjDef_xAOD& objTool, xAOD::JetContainer* jets,
     smeared_info.met_ =(float) (*met_it)->met();
     float min_dphi_jetMET  = 9999;
     int n_good_jets = 0;
-    for(auto jet: *jets){
+    for(auto jet: *jets) {
         float dphi = (float) fabs(TVector2::Phi_mpi_pi((*met_it)->phi() - jet->phi()));
         if(dphi < min_dphi_jetMET) min_dphi_jetMET = dphi;
-        bool is_signal = objTool.IsSignalJet((*jet), 30e3, 2.8, 0.64);
-        if(is_signal) n_good_jets ++;
+        // bool is_signal = objTool.IsSignalJet((*jet), 30e3, 2.8, 0.64);
+        if(jet->pt() > 30E3 && fabs(jet->eta()) < 2.8) n_good_jets ++;
     }
     smeared_info.min_jets_met_ = min_dphi_jetMET;
     smeared_info.n_good_jets_ = n_good_jets;
